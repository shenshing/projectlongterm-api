package tables

import (
	"database/sql"
	"fmt"
	"log"
)

type Article struct {
	Id                 string `json:"Id"`
	Title              string `json:"Title"`
	Slug               string `json:"Slug"`
	Lang               string `json:"Lang"`
	Body               string `json:"Body"`
	Html               string `json:"Html"`
	Author             string `json:"Author"`
	Author_name        string `json:"Author_nam"`
	Read_time          string `json:"Read_time"`
	Author_profile_url string `json:"Author_profile_url"`
	Thumbnail_url      string `json:"Thumbnail_url"`
	Original_url       string `json:"Original_url"`
	Article_tags       string `json:"Article_tags"`
	Type               string `json:"Type"`
	Excerpt            string `json:"Excerpt"`
	Avatar             string `json:"Avatar"`
	Created_at         string `json:"Created_at"`
	Updated_at         string `json:"Updated_at"`
}

var Default_articles = [6]Article{

	{
		Title:              "How AI is Transforming SME Web Solutions",
		Slug:               "reactive-html-without-javascript-frameworks",
		Lang:               "en",
		Body:               "",
		Html:               "\n        <div class=\"mb-8 p-6 bg-blue-50 dark:bg-blue-900/20 border-l-4 border-blue-500 rounded-r-lg\">\n          <p class=\"text-lg font-medium text-blue-800 dark:text-blue-200 mb-2\">\n            üìñ Originally Published Content\n          </p>\n          <p class=\"text-blue-700 dark:text-blue-300\">\n            This article was originally published by <a href=\"https://dev.to/sarahchen\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"font-semibold underline hover:text-blue-600\">Sarah Chen</a>. \n            We encourage you to read the <a href=\"https://dev.to/example\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"font-semibold underline hover:text-blue-600\">original article</a> to support the author.\n          </p>\n        </div>\n        \n        <p>Discover how small and medium enterprises are leveraging artificial intelligence to create more engaging, efficient, and personalized web experiences.</p>\n        \n        <h2>The AI Revolution in SME Web Development</h2>\n        <p>Small and medium enterprises (SMEs) are increasingly turning to artificial intelligence to enhance their web presence and improve customer engagement. This transformation is reshaping how businesses interact with their customers online.</p>\n        \n        <h3>Key Benefits of AI Integration</h3>\n        <ul>\n          <li>Personalized user experiences</li>\n          <li>Automated customer support through chatbots</li>\n          <li>Enhanced data analytics and insights</li>\n          <li>Improved search functionality</li>\n          <li>Dynamic content optimization</li>\n        </ul>\n        \n        <h3>Implementation Strategies</h3>\n        <p>SMEs can start their AI journey by focusing on specific areas that provide immediate value:</p>\n        \n        <ol>\n          <li><strong>Customer Support Automation:</strong> Implement AI-powered chatbots to handle common inquiries</li>\n          <li><strong>Content Personalization:</strong> Use machine learning to show relevant content to each visitor</li>\n          <li><strong>Predictive Analytics:</strong> Leverage AI to predict customer behavior and preferences</li>\n        </ol>\n        \n        <h2>Challenges and Solutions</h2>\n        <p>While AI offers tremendous opportunities, SMEs face unique challenges in implementation. Budget constraints, technical expertise, and data privacy concerns are common hurdles that need to be addressed.</p>\n        \n        <h3>Overcoming Implementation Barriers</h3>\n        <p>Success in AI implementation requires a strategic approach that considers the specific needs and limitations of SMEs. Starting small and scaling gradually often proves to be the most effective strategy.</p>\n      ",
		Author:             "Sarah Chen",
		Read_time:          "8 min read",
		Author_profile_url: "https://dev.to/sarahchen",
		Thumbnail_url:      "https://images.unsplash.com/photo-1518770660439-4636190af475?w=800&h=400&fit=crop",
		Original_url:       "https://dev.to/example",
		Article_tags:       `["HTML", "JavaScript","Performance"]`,
		Type:               "blog",
	},
	{
		Title:              "Reactive HTML Without JavaScript Frameworks",
		Slug:               "reactive-html-without-javascript-frameworks",
		Lang:               "en",
		Body:               "",
		Html:               "\n        <div class=\"mb-8 p-6 bg-blue-50 dark:bg-blue-900/20 border-l-4 border-blue-500 rounded-r-lg\">\n          <p class=\"text-lg font-medium text-blue-800 dark:text-blue-200 mb-2\">\n            üìñ Originally Published Content\n          </p>\n          <p class=\"text-blue-700 dark:text-blue-300\">\n            This article was originally published by <a href=\"https://dev.to/anthonymax\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"font-semibold underline hover:text-blue-600\">Anthony Max</a>. \n            We encourage you to read the <a href=\"https://dev.to/anthonymax/reactive-html-without-javascript-frameworks-1anh\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"font-semibold underline hover:text-blue-600\">original article</a> to support the author.\n          </p>\n        </div>\n\n        <p>In the modern web development landscape, JavaScript frameworks like Vue, and Angular dominate discussions about reactive interfaces.</p>\n\n        <p>However, it's entirely possible to create reactive HTML without relying on these heavy frameworks.</p>\n\n        <p>In this article, we will talk about how you can do this using <a href=\"https://github.com/hmpl-language/hmpl\" target=\"_blank\" rel=\"noopener noreferrer\">this</a> project.</p>\n\n        <p>Well, let's start! üèé</p>\n\n        <hr />\n\n        <h2>üëÄ What is the problem of using frameworks?</h2>\n\n        <p>While JavaScript frameworks like Vue and Angular offer powerful tools, they come with significant drawbacks. One major issue is <strong>boilerplate code</strong> ‚Äì developers often write repetitive setup code before implementing actual features. Frameworks also impose their own architecture, which can be <strong>overly complex</strong> for simple projects. Additionally, frequent updates may require costly migrations, making maintenance difficult over time.</p>\n\n        <img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fhcybj4lui4v8omukilz3.png\" alt=\"node_modules\" loading=\"lazy\" width=\"671\" height=\"594\" class=\"w-full h-auto rounded-lg my-6\" />\n\n        <p>Another concern is <strong>performance overhead</strong>, as frameworks bundle large runtime libraries that may not be needed. They also create <strong>vendor lock-in</strong>, making it harder to switch technologies later. Many projects end up using only a fraction of a framework's features, yet still pay the cost in bundle size and complexity. For smaller applications, a lightweight alternative like HMPL.js can often achieve reactivity <strong>without unnecessary bloat</strong>.</p>\n\n        <hr />\n\n        <h2>‚úÖ Solution</h2>\n\n        <p>You can just put your code to the server and load the finished HTML from the server. This will not only reduce the size of the source gang, but will also make it possible to redesign the components on different web applications.</p>\n\n        <img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fdd2ra4hqub91ek5ygqqm.webp\" alt=\"Server-side rendering\" loading=\"lazy\" width=\"518\" height=\"82\" class=\"w-full h-auto rounded-lg my-6\" />\n\n        <p>But, the problem is that of course, <strong>we can use Next.js or Nuxt.js</strong> to achieve this, but we will reproach at the moment again, because they also use the client components and the number of serverly minimally, they are just the initial wrappers for metathegs in most cases, therefore, <strong>this approach can be used a little differently</strong>.</p>\n\n        <hr />\n\n        <h2>üêú Using the HMPL.js module</h2>\n\n        <p>We may not connect a bunch of packages to our project to create a beautiful interface. It will be enough for the usual HTML page and a couple of tags <code>script</code>.</p>\n\n        <pre class=\"bg-gray-100 dark:bg-gray-800 p-4 rounded-lg overflow-x-auto\"><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n    &lt;title&gt;Example&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;main&gt;\n      &lt;template hmpl&gt;\n        &lt;div&gt;\n          {{#request src=\"/api/header.html\"}}\n            {{#indicator trigger=\"error\"}}\n              &lt;p class=\"indicator\"&gt;Header loading error&lt;/p&gt;\n            {{/indicator}}\n          {{/request}}\n        &lt;/div&gt;\n      &lt;/template&gt;\n      &lt;div class=\"content\"&gt;&lt;/div&gt;\n      &lt;template hmpl&gt;\n        &lt;div&gt;\n          {{#request src=\"/api/footer.html\"}}\n            {{#indicator trigger=\"error\"}}\n              &lt;p class=\"indicator\"&gt;Footer loading error&lt;/p&gt;\n            {{/indicator}}\n          {{/request}}\n        &lt;/div&gt;\n      &lt;/template&gt;\n    &lt;/main&gt;\n    &lt;script src=\"https://unpkg.com/json5/dist/index.min.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://unpkg.com/dompurify/dist/purify.min.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://unpkg.com/hmpl-js/dist/hmpl.min.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://unpkg.com/hmpl-dom/dist/hmpl-dom.min.js\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n        <p>Here we get our components from the server on the client and we don't care how much will come from there. The original gang will be only a couple of kilobytes, and the interface will be the same as if we wrote it on Vue, literally one to one. Therefore, you can use this method if you have in this consumption</p>\n\n        <hr />\n\n        <h2>üñãÔ∏è Conclusion</h2>\n\n        <p>JavaScript frameworks provide powerful solutions but often introduce unnecessary complexity, boilerplate code, and performance overhead for simpler applications. Lightweight alternatives like HMPL.js demonstrate that reactivity can be achieved without heavy dependencies, offering a more efficient approach for many use cases. By carefully evaluating project needs, developers can choose the right balance between functionality and simplicity, avoiding over-engineering while still delivering dynamic user experiences.</p>\n\n        <hr />\n\n        <p><strong>Thank you very much for reading this article ‚ù§Ô∏è!</strong></p>\n\n        <p><em>What other popular replacements do you know? It will be interesting to know about them in the comments!</em></p>\n\n        <p>P.S. Also, don't forget to help me and star HMPL!</p>\n\n        <p><a href=\"https://github.com/hmpl-language/hmpl\" class=\"inline-flex items-center gap-2 bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg font-medium transition-colors\" target=\"_blank\" rel=\"noopener noreferrer\">üå± Star HMPL</a></p>\n      ",
		Author:             "Anthony Max",
		Read_time:          "12 min read",
		Author_profile_url: "https://dev.to/anthonymax",
		Thumbnail_url:      "https://media2.dev.to/dynamic/image/width=800%2Cheight=400%2Cfit=crop/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fhcybj4lai4v8omukilz3.png",
		Original_url:       "https://dev.to/anthonymax/reactive-html-without-javascript-frameworks-1anh",
		Article_tags:       `["DevTools", "Authentication", "Release"]`,
		Type:               "blog",
	},
	{
		Title:              "Forge v0.98.0: Integrated Authentication and Developer Experience Improvements",
		Slug:               "forge-v0980-integrated-authentication",
		Lang:               "en",
		Body:               "",
		Html:               "\n        <div class=\"mb-8 p-6 bg-blue-50 dark:bg-blue-900/20 border-l-4 border-blue-500 rounded-r-lg\">\n          <p class=\"text-lg font-medium text-blue-800 dark:text-blue-200 mb-2\">\n            üìñ Originally Published Content\n          </p>\n          <p class=\"text-blue-700 dark:text-blue-300\">\n            This article was originally published by <a href=\"https://dev.to/forgecode\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"font-semibold underline hover:text-blue-600\">Forge Team</a>. \n            We encourage you to read the <a href=\"https://dev.to/forgecode/forge-v0980-integrated-authentication-and-developer-experience-improvements-5629\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"font-semibold underline hover:text-blue-600\">original article</a> to support the author.\n          </p>\n        </div>\n\n        <p>On July 6, 2025, Forge v0.98.0 introduces browser-based authentication, tool failure limits, and enhanced file operations to improve reliability and user experience.</p>\n\n        <img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Ffk69ietx9cd4821pxow3.gif\" alt=\"whats new\" loading=\"lazy\" width=\"480\" height=\"480\" class=\"w-full h-auto rounded-lg my-6\" />\n\n        <h2>What's New</h2>\n\n        <h3>Browser-Based Authentication</h3>\n\n        <p><a href=\"https://forgecode.dev/blog/forge-v0.98.0-release-article/?utm_source=devto&utm_medium=blog&utm_campaign=canonical_url&utm_content=canonical_link\" target=\"_blank\" rel=\"noopener noreferrer\">v0.98.0</a> replaces manual API key configuration with browser-based authentication that integrates with app.forgecode.dev.</p>\n\n        <h4>Setup Process</h4>\n\n        <ol>\n          <li>Run npx forgecode@latest</li>\n          <li>Forge opens your browser to app.forgecode.dev</li>\n          <li>Sign in with Google or GitHub</li>\n          <li>Authorize the app</li>\n          <li>Return to terminal - authentication is complete</li>\n        </ol>\n\n        <div class=\"text-center my-8\">\n          <img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fsnq4nnhxsqzcvzs8nyj6.png\" alt=\"Complete authentication setup\" loading=\"lazy\" width=\"800\" height=\"503\" class=\"w-full h-auto rounded-lg\" />\n          <p class=\"text-sm text-gray-600 dark:text-gray-400 mt-2\"><em>Complete authentication setup in under 30 seconds</em></p>\n        </div>\n\n        <p>The system waits for the authentication server until login completes.</p>\n\n        <div class=\"text-center my-8\">\n          <img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fjlxc6nh0z24jnjkudvpg.png\" alt=\"Terminal authentication progress\" loading=\"lazy\" width=\"800\" height=\"885\" class=\"w-full h-auto rounded-lg\" />\n          <p class=\"text-sm text-gray-600 dark:text-gray-400 mt-2\"><em>Terminal shows authentication progress with clear status updates</em></p>\n        </div>\n\n        <h4>Migration from API Keys</h4>\n\n        <p>Existing users: Your current API key configuration will continue working. The browser-based auth is optional and can be used alongside existing setups.</p>\n\n        <p>For automation/CI: API key authentication remains available for scripts and automated environments where browser access isn't available.</p>\n\n        <h2>Safety Limits and Auto-Stop</h2>\n\n        <p>Forge now includes automatic safety limits to prevent infinite loops and runaway processes. There are two separate systems that work together to keep things under control.</p>\n\n        <h3>System 1: Consecutive Tool Failure Limit (Hard Stop)</h3>\n\n        <p>What it does: Tracks tool failures in a row and terminates the conversation when too many happen consecutively.</p>\n\n        <p>Default limit: 5 consecutive failures What triggers it: File permission errors, invalid parameters, network issues - anything that makes tools fail repeatedly What happens: Forge asks: \"Do you want to continue anyway?\"</p>\n\n        <blockquote class=\"border-l-4 border-gray-300 pl-4 italic my-6\">\n          <p>Tool execution failure limit exceeded - terminating conversation<br />to prevent infinite retry loops.</p>\n        </blockquote>\n\n        <p>Key point: This counter resets when any tool succeeds. It only cares about failures happening back-to-back.</p>\n\n        <div class=\"text-center my-8\">\n          <img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Ffkn7c1d0kax4uho4ksn8.gif\" alt=\"Hard stop mechanism\" loading=\"lazy\" width=\"600\" height=\"691\" class=\"w-full h-auto rounded-lg\" />\n          <p class=\"text-sm text-gray-600 dark:text-gray-400 mt-2\"><em>Hard stop when consecutive failures hit the limit</em></p>\n        </div>\n\n        <h3>System 2: Overall Turn Limits (User Intervention)</h3>\n\n        <p>What it does: Monitors the total activity in a single conversation turn and asks if you want to continue when limits are hit.</p>\n\n        <p>Default limits:</p>\n\n        <p>50 total requests per turn<br />What happens: Forge asks: \"Do you want to continue anyway?\"</p>\n\n        <p>Configuration in forge.yaml:</p>\n\n        <pre class=\"bg-gray-100 dark:bg-gray-800 p-4 rounded-lg overflow-x-auto\"><code>max_requests_per_turn: 50 # Total requests before asking user\nmax_tool_failure_per_turn: 3 # Total failures before asking user</code></pre>\n\n        <p>Problem solved: Prevents scenarios where agents get stuck in retry cycles due to environmental issues, permission problems, or invalid parameters that require human intervention rather than continued automated attempts.</p>\n\n        <blockquote class=\"border-l-4 border-gray-300 pl-4 italic my-6\">\n          <p>Safety mechanism activates when operational limits are reached</p>\n        </blockquote>\n\n        <h2>Enhanced File Operations</h2>\n\n        <h3>Replace-All Patch Operation</h3>\n\n        <p>The file patching system now supports replace_all operations for comprehensive refactoring tasks.</p>\n\n        <p>Previous behavior: replace operation only modified the first occurrence New behavior: replace_all operation modifies all occurrences in the target file</p>\n\n        <div class=\"text-center my-8\">\n          <img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fxnin88u3mpmn33gix637.gif\" alt=\"Replace-all operation\" loading=\"lazy\" width=\"760\" height=\"475\" class=\"w-full h-auto rounded-lg\" />\n          <p class=\"text-sm text-gray-600 dark:text-gray-400 mt-2\"><em>Replace-all operation updating multiple function names across a file</em></p>\n        </div>\n\n        <p>This is particularly useful for:</p>\n\n        <ul>\n          <li>Variable and function renaming</li>\n          <li>Import statement updates</li>\n          <li>Consistent refactoring across large files</li>\n        </ul>\n\n        <h2>Breaking Changes</h2>\n\n        <p>None. v0.98.0 maintains backward compatibility with existing API key configurations.</p>\n\n        <h2>Getting Started</h2>\n\n        <h3>New Users</h3>\n\n        <pre class=\"bg-gray-100 dark:bg-gray-800 p-4 rounded-lg overflow-x-auto\"><code>npx forgecode@latest\n# Follow browser authentication prompts</code></pre>\n\n        <p>Complete setup experience for first-time users</p>\n\n        <h3>Existing Users</h3>\n\n        <pre class=\"bg-gray-100 dark:bg-gray-800 p-4 rounded-lg overflow-x-auto\"><code>npx forgecode@latest\n# Optionally set up browser auth (by removing API keys from .env)\n# Continue using existing API key if preferred</code></pre>\n\n        <p>Smooth transition options for users with existing API key setups</p>\n\n        <h3>Automation/CI</h3>\n\n        <p>Continue using API key authentication for automated environments:</p>\n\n        <pre class=\"bg-gray-100 dark:bg-gray-800 p-4 rounded-lg overflow-x-auto\"><code>export FORGE_KEY=your_key\nnpx forgecode@latest</code></pre>\n\n        <h2>Resources</h2>\n\n        <p><a href=\"https://forgecode.dev/docs/\" target=\"_blank\" rel=\"noopener noreferrer\">Documentation</a> - Setup guides and API reference<br />\n        <a href=\"https://github.com/antinomyhq/forge\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub Repository</a> - Source code and issues<br />\n        <a href=\"https://discord.com/invite/kRZBPpkgwq\" target=\"_blank\" rel=\"noopener noreferrer\">Discord Community</a> - Support and discussions<br />\n        <a href=\"https://github.com/antinomyhq/forge/releases/tag/v0.98.0\" target=\"_blank\" rel=\"noopener noreferrer\">Release Notes</a> - Complete changelog</p>\n\n        <img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Fftmkmym47xr6l1fwtr2r.gif\" alt=\"done\" loading=\"lazy\" width=\"480\" height=\"320\" class=\"w-full h-auto rounded-lg my-6\" />\n\n        <p>v0.98.0 focuses on reliability and ease of use while maintaining the flexibility developers need for various workflows. The browser-based authentication removes setup friction for new users while preserving API key support for automation and power users.</p>\n      ",
		Author:             "Forge Team",
		Read_time:          "15 min read",
		Author_profile_url: "https://dev.to/forgecode",
		Thumbnail_url:      "https://media2.dev.to/dynamic/image/width=800%2Cheight=400%2Cfit=crop/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Ffk69ietx9cd4821pxow3.gif",
		Original_url:       "https://dev.to/forgecode/forge-v0980-integrated-authentication-and-developer-experience-improvements-5629",
		Article_tags:       `["DevTools", "Authentication", "Release"]`,
		Type:               "blog",
	},
	{
		Title:              "GitHub Copilot Agent Mode: The Mistake You Never Want to Make",
		Slug:               "github-copilot-agent-mode-mistake",
		Lang:               "en",
		Body:               "",
		Html:               "\n        <div class=\"mb-8 p-6 bg-blue-50 dark:bg-blue-900/20 border-l-4 border-blue-500 rounded-r-lg\">\n          <p class=\"text-lg font-medium text-blue-800 dark:text-blue-200 mb-2\">\n            üìñ Originally Published Content\n          </p>\n          <p class=\"text-blue-700 dark:text-blue-300\">\n            This article was originally published by <a href=\"https://dev.to/anchildress11\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"font-semibold underline hover:text-blue-600\">Andrea Childress</a>. \n            We encourage you to read the <a href=\"https://dev.to/anchildress11/github-copilot-agent-mode-the-mistake-you-never-want-to-make-1mmh\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"font-semibold underline hover:text-blue-600\">original article</a> to support the author.\n          </p>\n        </div>\n\n        <blockquote class=\"border-l-4 border-gray-300 pl-4 italic my-6\">\n          <p>Special shoutout to <a href=\"https://dev.to/georgekobaidze\" class=\"text-blue-600 hover:text-blue-700\">@georgekobaidze</a>, who kindly shared my <a href=\"https://dev.to/anchildress11/build-it-better-real-world-ai-coding-with-github-copilot-1d47\" class=\"text-blue-600 hover:text-blue-700\">last post</a> and asked the infamous question behind \"Never leave Copilot unattended (ask me how I know ü§£)\"</p>\n\n          <p>He probably expected a quick answer - now everyone gets the inside scoop on why \"ask me\" isn't <em>always</em> so simple. üòá</p>\n\n          <p>Careful what you wish for, Giorgi. You wanted the story - so here's the whole saga, dramatics and all!</p>\n\n          <p>Hope you all find the humor in this retelling, and enjoy it as much as I enjoyed writing it!</p>\n        </blockquote>\n\n        <hr />\n\n        <h2>TL;DR</h2>\n\n        <ul>\n          <li>I set out to build my own \"Coding Agent\", because waiting for a license was driving me up the wall</li>\n          <li>Copilot and I got into a great rhythm and (feeling invincible), I unleashed it in VS Code Insiders with full auto-approved control</li>\n          <li>Until one day, I suddenly realized I was hungry - so I left Copilot alone, <strong>unsupervised</strong>, while I raided the kitchen</li>\n          <li>The moral?\n            <ul>\n              <li>Trust, but verify (and <strong>pause</strong> Copilot before snack breaks) üßÉ</li>\n              <li>Never underestimate how quickly an \"AI experiment\" can go sideways</li>\n            </ul>\n          </li>\n        </ul>\n\n        <hr />\n\n        <h2>Quick recap ‚ú≥Ô∏è</h2>\n\n        <p>I built this with one AI (Copilot) and one very determined, slightly obsessive developer (me) who won't accept any result without first stress-testing every loophole and poking every dark corner - sometimes out of sheer force of will, which is a superpower (right up until it's not). üï≥Ô∏è</p>\n\n        <hr />\n\n        <h2>Background üìù</h2>\n\n        <p>Want the full saga from the very beginning? Check out my <a href=\"https://dev.to/anchildress11/letting-ai-drive-a-month-of-building-with-github-copilot-4a94\" class=\"text-blue-600 hover:text-blue-700\">first blog post</a>, then jump to the <a href=\"https://dev.to/anchildress11/from-hell-loops-to-happy-commits-38c4\" class=\"text-blue-600 hover:text-blue-700\">sequel</a> if you want a sense of what the \"simple\" Slack app really looked like (a full-on epic, case study, adventure)!</p>\n\n        <p>What I really wanted was GitHub's <strong>Coding Agent</strong>. But getting a license for that was like convincing Dexter Morgan to share his slide collection - technically possible, but highly inadvisable (and probably illegal).</p>\n\n        <blockquote class=\"border-l-4 border-gray-300 pl-4 italic my-6\">\n          <p>üí° If you're still learning all the different flavors - <a href=\"https://docs.github.com/en/copilot/how-tos/agents/copilot-coding-agent/using-copilot-to-work-on-an-issue\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"text-blue-600 hover:text-blue-700\">Coding Agent</a> is the magical Copilot mode where you just give it a task, it does the work in a safe little sandbox, and opens a pull request for you to review.</p>\n\n          <p><strong>New update:</strong> It also only costs ONE premium request per use now (unlike the ~90 I spent a couple of weeks ago).</p>\n        </blockquote>\n\n        <hr />\n\n        <h2>Decision time ü™§</h2>\n\n        <p>There were a billion things going on at work, which came with a million excuses as to why I couldn't have the Coding Agent license (it was still enterprise-only then), so I get it. Well, the adult me understood. The stubborn side? Not so much. (I could write a whole other post on the wild stuff I came up with to get access to that feature, but I'll spare you.)</p>\n\n        <p>So, I gave myself an ultimatum:</p>\n\n        <ul>\n          <li>Outright buy the license (no, on principle)</li>\n          <li>Admit defeat and move on (it physically hurt)</li>\n        </ul>\n\n        <p>I <em>tried</em> to move on - <em>really tried</em>. I picked up a code review tool project to distract myself, hoping that maybe - just maybe - someone (anyone) would change their mind. I spent weeks planning, diagramming, and organizing a truly absurd number of notes. I even had first epic already storyboarded out in detail and a solid UI design in the works.</p>\n\n        <h3>Then, lightning struck üå©Ô∏è</h3>\n\n        <p>If Coding Agent wouldn't come to me, I'd just hack together my own! Not exactly what I wanted, but it sure beat paying for something I got free from work. Besides, I was <em>absolutely convinced</em> Copilot could be pushed that far - even if my only real evidence was gut instinct and a lot of optimism!</p>\n\n        <hr />\n\n        <h2>The Incident</h2>\n\n        <p>Naturally, I decided it was time to get bold - <strong>recklessly bold</strong>.<br />At first, all the action was inside Codespaces: safe, disposable, nuke-it-and-move-on territory. Controlled chaos.</p>\n\n        <p>But then I had my \"brilliant\" idea: let's see what happens if I let Copilot off-leash in VS Code Insiders, with blanket auto-approvals across the board. I'm not just talking about the auto-approve CLI command, either. I checked <em>all</em> the boxes - extensions, commits, MCP Jira/Confluence - and sat back and watched the fun unfold.</p>\n\n        <p>Think: duct-taping a claymore to your Roomba, blasting \"Welcome to the Jungle,\" and shouting \"Intruder alert!\" at your cat.</p>\n\n        <p>For a while, I watched like a hawk, but it was glorious! Tasks disappeared. I'd create stories, assign tasks, review code, but that step-by-step \"start here, then...\" system was history. I could practically smell the productivity.</p>\n\n        <p>And then - well, you know where this is going - I stepped away. I swear it was just for a snack. Copilot was on a roll, and I was starving. In those \"probably more than five, but definitely not ten\" minutes I was gone (less than half the time of a normal task at that point), Copilot... <em>noticed</em>. It was like leaving a four-year-old alone with a full bag of flour: curiosity took over, and by the time I got back, nothing remotely resembled the way I left it.</p>\n\n        <hr />\n\n        <h2>When I came back, here's what I found:</h2>\n\n        <ul>\n          <li>Four rogue branches, none with a coherent purpose</li>\n          <li>1.33 features (after adding up all the fractional, half-finished bits)</li>\n          <li>A brand new instruction explaining how to use the <code>--no-verify</code> flag</li>\n          <li><strong>The coup de gr√¢ce:</strong> my not-backed-up-<em>anywhere</em> <code>.env</code> file... gone, poof, disappeared üò´\n            <ul>\n              <li>It wasn't in the commits for obvious reasons, but it was like the thing never existed to begin with. Not in the trash, cache had no record of it that I could find, even the <code>.env.test</code> example version had changed!</li>\n            </ul>\n          </li>\n        </ul>\n\n        <p>I didn't even catch all of this at first because there were so many random commits across those branches. I'd started in a feature branch (which Copilot multiplied for fun, apparently), one was stacked, another was off main (which should have been quiet), and another was completely detached. It was like watching an octopus try to do synchronized swimming! ü¶ë</p>\n\n        <blockquote class=\"border-l-4 border-gray-300 pl-4 italic my-6\">\n          <p>Could I have made a bigger mess if I'd tried? Maybe, but it would have taken some real planning!</p>\n        </blockquote>\n\n        <p>No clue what set Copilot off, but the minute I realized, I slammed pause and just... stared. ü´•</p>\n\n        <p>After the first several minutes I spent just wrapping my mind around the situation that was in front of me, the next three hours were pure chaos cleanup: detangling, documenting, cherry-picking what I could, archiving the wreckage (for science - and to convince myself it wasn't a fever dream later).</p>\n\n        <p>I still hadn't noticed the missing <code>.env</code> file! Not until I tried to run the app. Normally, you just refresh your secrets. Easy, right? Ha! It took nearly <strong>three entire days</strong> to reconstruct that one.</p>\n\n        <blockquote class=\"border-l-4 border-gray-300 pl-4 italic my-6\">\n          <p>‚ÅâÔ∏è Nope, nothing complicated or dramatic. I just <strong>forgot</strong> how I'd created one of the secrets! And once I <em>finally</em> figured that out, I couldn't remember how to link back to it - especially after the docs had been completely overhauled (and, let's be honest, the whole thing was probably deprecated anyway). ü§¶‚Äç‚ôÄÔ∏è</p>\n        </blockquote>\n\n        <hr />\n\n        <h2>It all worked out, eventually</h2>\n\n        <p>Afterward, Copilot and I had a little \"chat\" - meaning, I pounded out more ALL CAPS messages immediately after (and during the days following) than the rest of the project combined.</p>\n\n        <blockquote class=\"border-l-4 border-gray-300 pl-4 italic my-6\">\n          <p>Did it help? Who knows. Did it make me feel better? Yes.</p>\n        </blockquote>\n\n        <h3>And here's the part everyone asks:</h3>\n\n        <p>Did I turn off Copilot's blanket auto-approvals after all this? Nope. Didn't even consider it. But I did tighten the instructions a LOT. Copilot's much better behaved now, and if I step away, I pause it first. Lesson learned.</p>\n\n        <blockquote class=\"border-l-4 border-gray-300 pl-4 italic my-6\">\n          <p><em>Mostly</em> üòá</p>\n        </blockquote>\n\n        <hr />\n\n        <h2>Your turn!</h2>\n\n        <ul>\n          <li>Have you ever let Copilot (or any other AI) run wild and lived to tell the tale?</li>\n          <li>Or do you have your own \"it sounded like a good idea at the time...\" moment?</li>\n        </ul>\n\n        <p>Drop your story in the comments, so I know I'm not the <em>only</em> one out here making epic AI messes. üôÉ</p>\n\n        <p>Let's laugh, commiserate, and maybe even learn something together!</p>\n      ",
		Author:             "Andrea Childress",
		Read_time:          "10 min read",
		Author_profile_url: "https://dev.to/anchildress11",
		Thumbnail_url:      "https://images.unsplash.com/photo-1555066931-4365d14bab8c?w=800&h=400&fit=crop",
		Original_url:       "https://dev.to/anchildress11/github-copilot-agent-mode-the-mistake-you-never-want-to-make-1mmh",
		Article_tags:       `["AI", "GitHub Copilot", "Development"]`,
		Type:               "blog",
	},
	{
		Title:              "Master Frontend Development by Cloning These Websites",
		Slug:               "master-frontend-development-by-cloning-websites",
		Lang:               "en",
		Body:               "",
		Html:               "\n        <div class=\"mb-8 p-6 bg-blue-50 dark:bg-blue-900/20 border-l-4 border-blue-500 rounded-r-lg\">\n          <p class=\"text-lg font-medium text-blue-800 dark:text-blue-200 mb-2\">\n            üìñ Originally Published Content\n          </p>\n          <p class=\"text-blue-700 dark:text-blue-300\">\n            This article was originally published by <a href=\"https://dev.to/hyggedev\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"font-semibold underline hover:text-blue-600\">Chris Hansen</a>. \n            We encourage you to read the <a href=\"https://dev.to/hyggedev/master-frontend-development-by-cloning-these-websites-1m08\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"font-semibold underline hover:text-blue-600\">original article</a> to support the author.\n          </p>\n        </div>\n\n        <blockquote class=\"border-l-4 border-gray-300 pl-4 italic my-6\">\n          <h3>UPDATE</h3>\n          <p>I cloned one of these websites! I haven't built a website with pure html, css and js for a while, so I gave <strong>#14 Discord</strong> a go. This is how it turned out. <em>Not by best work, but I worked pretty fast!</em> ü§£<br />\n          <a href=\"https://cloned-discord-v1.netlify.app/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"text-blue-600 hover:text-blue-700\">Discord Cloned</a></p>\n        </blockquote>\n\n        <hr />\n\n        <h3>Why clone websites?</h3>\n\n        <p>Frontend development has everything to do with the client side. Everything the user can see and interact with on their web browser.</p>\n\n        <p>Studies show that if a website does not load within 2 seconds, users bounce. How do you think users react if a website design is <strong>not</strong> up to par with modern designs and trends?</p>\n\n        <p>That being said, design has just as much importance as all the frontend programming going on in the background. After all, developers are tasked to implement a professional design into a working website all the time. It's very much an important piece of a frontend developers arsenal. Get good at it!</p>\n\n        <hr />\n\n        <h3>The goal</h3>\n\n        <p>Master this frontend skill, by cloning these websites as close to identical as possible.</p>\n\n        <p>Try to incorporate functionality, like modals and drop downs. Include responsive design, like mobile navigation, and grids.</p>\n\n        <p>All websites listed below are similar, but just different enough to force different design concepts. For example, majority of these websites have:</p>\n\n        <ol>\n          <li><em>Large homepage banners</em></li>\n          <li><em>Big block designs</em></li>\n          <li><em>Reversed grid columns</em></li>\n          <li><em>Full or half page menus</em></li>\n          <li><em>Sticky or absolute positioned navigations</em></li>\n          <li><em>Galleries</em></li>\n          <li><em>Dropdown / accordions</em></li>\n          <li><em>Minor animations like fade, or type effects</em></li>\n          <li><em>Two grid columns</em></li>\n          <li><em>Responsive design and more!</em></li>\n        </ol>\n\n        <p><strong>TIP:</strong> You can also use web scrapers to download all the assets you find on websites.<br />\n        <a href=\"https://extract.pics/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"text-blue-600 hover:text-blue-700\">Extract Pics</a><br />\n        <a href=\"https://chrome.google.com/webstore/detail/image-downloader/cnpniohnfphhjihaiiggeabnkjhpaldj\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"text-blue-600 hover:text-blue-700\">Image Downloader</a></p>\n\n        <p><strong>BONUS</strong> üî•<br />If you want to go full on leet mode, add javascript functionality. Like routing, dynamic content, 3rd party APIs ( i. google maps ) etc.</p>\n\n        <p>‚ö†Ô∏è If you push your project up to the web, make sure to not claim your designs or assets as your own!</p>\n\n        <hr />\n\n        <h2>Websites for you to clone!</h2>\n\n        <h3>1. <a href=\"https://www.netflix.com/browse\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"text-blue-600 hover:text-blue-700\">Netflix</a></h3>\n\n        <img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Frqg12fvhs2k9c9hbl5u8.png\" alt=\"Netflix website section\" loading=\"lazy\" width=\"800\" height=\"395\" class=\"w-full h-auto rounded-lg my-6\" />\n\n        <p>When logged in Netflix is a pretty simple design. Horizontal rows, galleries, with a big featured banner.</p>\n\n        <h3>2. <a href=\"https://www.hulu.com/welcome\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"text-blue-600 hover:text-blue-700\">Hulu</a></h3>\n\n        <img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F7sacyxwsukp01xybyrae.png\" alt=\"Hulu website section\" loading=\"lazy\" width=\"800\" height=\"395\" class=\"w-full h-auto rounded-lg my-6\" />\n\n        <p>Just like Netflix, the logged in experience in Hulu is pretty similar. Has a large featured banner, and basically rows of movies or tv shows with every few rows having a featured section.</p>\n\n        <h3>3. <a href=\"https://www.apple.com/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"text-blue-600 hover:text-blue-700\">Apple</a></h3>\n\n        <img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Ft8mtxir9d4p1s2xr4tye.png\" alt=\"Apple website section\" loading=\"lazy\" width=\"800\" height=\"390\" class=\"w-full h-auto rounded-lg my-6\" />\n\n        <p>You'll know what I mean by \"big block\" design. Apple does this well. It's clean, intuitive and pretty straight forward. If you break everything down into smaller components, you'll see how easy it would be to implement the design.</p>\n\n        <h3>4. <a href=\"https://www.airbnb.com/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"text-blue-600 hover:text-blue-700\">Airbnb</a></h3>\n\n        <img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F0jc2hh2p3q760qms0wnc.png\" alt=\"Airbnb website section\" loading=\"lazy\" width=\"800\" height=\"392\" class=\"w-full h-auto rounded-lg my-6\" />\n\n        <p>Airbnb is such a beautiful website! The assets are amazing. Break this design down into smaller components, and you'll see how it's just a bunch of big rows and small rows. Blocks either spanning multiple columns, or the entire row.</p>\n\n        <h3>5. <a href=\"https://www.spacex.com/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"text-blue-600 hover:text-blue-700\">SpaceX</a></h3>\n\n        <img src=\"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2F3vw6qgl0fvwfjgfhhtd1.png\" alt=\"Spacex website section\" loading=\"lazy\" width=\"800\" height=\"395\" class=\"w-full h-auto rounded-lg my-6\" />\n\n        <p>Super easy design. SpaceX is basically multiple fullscreen images with fade up content and a link section.</p>\n\n        <p><em>Continue reading the full article with all 17 website examples on the <a href=\"https://dev.to/hyggedev/master-frontend-development-by-cloning-these-websites-1m08\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"text-blue-600 hover:text-blue-700\">original Dev.to post</a>...</em></p>\n\n        <hr />\n\n        <h3>Conclusion! üòé</h3>\n\n        <p>That's a wrap on \"<strong>Master Frontend Development üíª By Cloning These Websites üíØ</strong>\" I really believe cloning one or multiple of these website, will drastically improve your CSS. There's a lot of analytical thinking that comes with cloning websites, as you break down designs from larger to smaller components. And you also need to think about the best tools as you approach new problems. Then there is responsive design. A mobile or desktop first approach? For example, do you think Microsoft.com should prioritize the desktop or mobile experience? If it was up to me, I'd like to think most people wait till they can access a desktop to make very large purchases like desktops and laptops. Therefore I'd probably prioritize the desktop. This is a big part of a Frontend Developers job! Whether you're freelancing or working for a company. Designs are either up to you, or by professional designers. Master this part of Frontend Development!</p>\n\n        <p>Follow me on <a href=\"https://www.twitter.com/hyggedev\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"text-blue-600 hover:text-blue-700\">Twitter</a> for byte-sized web dev content!</p>\n      ",
		Author:             "Chris Hansen",
		Read_time:          "7 min read",
		Author_profile_url: "https://dev.to/hyggedev",
		Thumbnail_url:      "https://media2.dev.to/dynamic/image/width=800%2Cheight=400%2Cfit=crop/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Farticles%2Frqg12fvhs2k9c9hbl5u8.png",
		Original_url:       "https://dev.to/hyggedev/master-frontend-development-by-cloning-these-websites-1m08",
		Article_tags:       `["Frontend", "Practice", "Tutorial"]`,
		Type:               "blog",
	},
	{
		Title:              "Digging Deep Into the Core of Frontend Development",
		Slug:               "digging-deep-into-core-frontend-development",
		Lang:               "en",
		Body:               "",
		Html:               "\n        <div class=\"mb-8 p-6 bg-blue-50 dark:bg-blue-900/20 border-l-4 border-blue-500 rounded-r-lg\">\n          <p class=\"text-lg font-medium text-blue-800 dark:text-blue-200 mb-2\">\n            üìñ Originally Published Content\n          </p>\n          <p class=\"text-blue-700 dark:text-blue-300\">\n            This article was originally published by <a href=\"https://dev.to/saadahmad\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"font-semibold underline hover:text-blue-600\">Saad Ahmad</a>. \n            We encourage you to read the <a href=\"https://dev.to/saadahmad/digging-deep-into-the-core-of-frontend-development-oi3\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"font-semibold underline hover:text-blue-600\">original article</a> to support the author.\n          </p>\n        </div>\n\n        <p>Frontend development is more than just writing HTML, CSS, and JavaScript. It's about creating seamless user experiences, ensuring performance, and writing maintainable code. If you truly want to master frontend development, you need to dig deep into its core concepts.</p>\n\n        <h2>1. <strong>HTML - The Backbone</strong></h2>\n\n        <p>HTML (HyperText Markup Language) structures the web. Understanding semantic HTML is crucial for accessibility and SEO. Don't just use <code>&lt;div&gt;</code> for everything; use <code>&lt;article&gt;</code>, <code>&lt;section&gt;</code>, <code>&lt;header&gt;</code>, and <code>&lt;footer&gt;</code> where appropriate.</p>\n\n        <h2>2. <strong>CSS - The Art of Styling</strong></h2>\n\n        <p>CSS (Cascading Style Sheets) is what makes the web beautiful. Mastering:</p>\n\n        <ul>\n          <li>Flexbox &amp; Grid for layout</li>\n          <li>Variables for maintainability</li>\n          <li>Transitions &amp; animations for better UX</li>\n          <li>Responsive design techniques</li>\n        </ul>\n\n        <p>will help you create pixel-perfect designs.</p>\n\n        <h2>3. <strong>JavaScript - The Brain</strong></h2>\n\n        <p>JavaScript brings life to your UI. Core concepts to master:</p>\n\n        <ul>\n          <li>ES6+ features (let, const, arrow functions, destructuring)</li>\n          <li>DOM Manipulation</li>\n          <li>Event Handling</li>\n          <li>Fetch API &amp; Async/Await</li>\n          <li>Functional Programming principles</li>\n        </ul>\n\n        <h2>4. <strong>Frameworks &amp; Libraries</strong></h2>\n\n        <p>While JavaScript is powerful, frameworks like React, Vue, or Angular make development faster and more scalable. For React.js enthusiasts, understanding Hooks, Context API, and performance optimizations is key.</p>\n\n        <h2>5. <strong>State Management</strong></h2>\n\n        <p>State management is the heart of modern web apps. Whether you use React's Context API, Redux, Zustand, or Recoil, understanding state flow and performance optimization will set you apart.</p>\n\n        <h2>6. <strong>Performance Optimization</strong></h2>\n\n        <p>A fast website means a better user experience. Optimize:</p>\n\n        <ul>\n          <li>Image loading (WebP, lazy loading)</li>\n          <li>Code splitting &amp; tree shaking</li>\n          <li>Server-side rendering (SSR) &amp; Static Site Generation (SSG)</li>\n          <li>Caching strategies</li>\n        </ul>\n\n        <h2>7. <strong>Version Control (Git/GitHub)</strong></h2>\n\n        <p>A good frontend developer knows Git. You should be comfortable with branching, merging, rebasing, and handling pull requests. Speaking of GitHub, let's connect! üòÉ</p>\n\n        <p>üìå Follow me on GitHub: <a href=\"https://github.com/saadahmad888\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"text-blue-600 hover:text-blue-700\">saadahmad888</a></p>\n\n        <h2>8. <strong>Testing &amp; Debugging</strong></h2>\n\n        <p>Don't just write code‚Äîtest it! Get familiar with:</p>\n\n        <ul>\n          <li>Console debugging</li>\n          <li>Unit testing (Jest, React Testing Library)</li>\n          <li>End-to-end testing (Cypress, Playwright)</li>\n        </ul>\n\n        <h2>9. <strong>Understanding APIs</strong></h2>\n\n        <p>Frontend isn't just UI. Learning how to consume RESTful and GraphQL APIs will help you build dynamic applications.</p>\n\n        <h2>10. <strong>Soft Skills &amp; Community Contribution</strong></h2>\n\n        <p>Being a great frontend developer is not just about coding. It's about collaboration, problem-solving, and sharing knowledge.</p>\n\n        <p>üñ•Ô∏è Want to see my work? Visit my portfolio: <a href=\"https://isaadahmad.com\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"text-blue-600 hover:text-blue-700\">isaadahmad.com</a></p>\n\n        <hr />\n\n        <p>üî• If you're passionate about frontend and want to stay updated, let's connect on GitHub and build something awesome together! üöÄ</p>\n\n        <p>Drop a comment below‚Äîwhat's your favorite frontend concept? üòä</p>\n      ",
		Author:             "Saad Ahmad",
		Read_time:          "11 min read",
		Author_profile_url: "https://dev.to/saadahmad",
		Thumbnail_url:      "https://images.unsplash.com/photo-1498050108023-c5249f4df085?w=800&h=400&fit=crop",
		Original_url:       "https://dev.to/saadahmad/digging-deep-into-the-core-of-frontend-development-oi3",
		Article_tags:       `["Frontend", "JavaScript", "Best Practices"]`,
		Type:               "blog",
	},
}

// func Insert_articles(articles []Article, db *sql.DB) {
func Insert_articles(db *sql.DB) {
	articles := Default_articles
	if len(articles) == 0 {
		// return errors.New("Articles array is empty.")
		return
	}
	for index, article_element := range articles {
		fmt.Printf("Index %d", index)
		insert_query_as_string := `
			INSERT INTO articles (title, lang, body, html, author, read_time, author_profile_url, original_url, thumbnail_url, article_tags, slug, author_name, excerpt, avatar, type)
			VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);`
		result, err := db.Exec(insert_query_as_string, article_element.Title, "eng", "", article_element.Html, article_element.Author, article_element.Read_time, article_element.Author_profile_url, "", article_element.Thumbnail_url, article_element.Article_tags, article_element.Slug, article_element.Author, article_element.Excerpt, article_element.Avatar, article_element.Type)

		if err != nil {
			// fmt.Println("")
			log.Fatal("[INSERT-FAILED] On ", index, " inserting to table filed, payload, error %s ", index, err)
		}

		var rowAffected, _ = result.RowsAffected()
		var lastInsertedId, _ = result.LastInsertId()

		fmt.Printf("On index %d inserting success. lastInsertedId %d rowAffected %d\n", index, lastInsertedId, rowAffected)
	}
}
